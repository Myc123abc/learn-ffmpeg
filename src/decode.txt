#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 
 extern "C"
 {
#include <libavutil/frame.h>
#include <libavutil/mem.h>
#include <libavformat/avformat.h>
#include <libavcodec/avcodec.h>
 }


#include <string_view>

#include <xaudio2.h>
#include <vector>
std::vector<uint8_t> g_data;
#include <wrl/client.h>
using namespace Microsoft::WRL;
static inline void exitIfFailed(HRESULT hr)
{
    if (FAILED(hr)) exit(EXIT_FAILURE);
}

inline void exitIf(bool b, std::string_view msg = "", ...)
{
    if (b)
    {
        va_list args;
        va_start(args, msg);
        av_log(nullptr, AV_LOG_ERROR, msg.data(), args);
        va_end(args);
        exit(EXIT_FAILURE);
    }
}

#define AUDIO_INBUF_SIZE 20480
#define AUDIO_REFILL_THRESH 4096
 
static int get_format_from_sample_fmt(const char **fmt,
                                      enum AVSampleFormat sample_fmt)
{
    int i;
    struct sample_fmt_entry {
        enum AVSampleFormat sample_fmt; const char *fmt_be, *fmt_le;
    } sample_fmt_entries[] = {
        { AV_SAMPLE_FMT_U8,  "u8",    "u8"    },
        { AV_SAMPLE_FMT_S16, "s16be", "s16le" },
        { AV_SAMPLE_FMT_S32, "s32be", "s32le" },
        { AV_SAMPLE_FMT_FLT, "f32be", "f32le" },
        { AV_SAMPLE_FMT_DBL, "f64be", "f64le" },
    };
    *fmt = NULL;
 
    for (i = 0; i < FF_ARRAY_ELEMS(sample_fmt_entries); i++) {
        struct sample_fmt_entry *entry = &sample_fmt_entries[i];
        if (sample_fmt == entry->sample_fmt) {
            *fmt = AV_NE(entry->fmt_be, entry->fmt_le);
            return 0;
        }
    }
 
    fprintf(stderr,
            "sample format %s is not supported as output format\n",
            av_get_sample_fmt_name(sample_fmt));
    return -1;
}
 
// static void decode(AVCodecContext *dec_ctx, AVPacket *pkt, AVFrame *frame,
//                    FILE *outfile)
static void decode(AVCodecContext *dec_ctx, AVPacket *pkt, AVFrame *frame)
{
    int i, ch;
    int ret, data_size;
 
    /* send the packet with the compressed data to the decoder */
    ret = avcodec_send_packet(dec_ctx, pkt);
    if (ret < 0) {
        fprintf(stderr, "Error submitting the packet to the decoder\n");
        exit(1);
    }
 
    /* read all the output frames (in general there may be any number of them */
    while (ret >= 0) {
        ret = avcodec_receive_frame(dec_ctx, frame);
        if (ret == AVERROR(EAGAIN) || ret == AVERROR_EOF)
            return;
        else if (ret < 0) {
            fprintf(stderr, "Error during decoding\n");
            exit(1);
        }
        data_size = av_get_bytes_per_sample(dec_ctx->sample_fmt);
        if (data_size < 0) {
            /* This should not occur, checking just for paranoia */
            fprintf(stderr, "Failed to calculate data size\n");
            exit(1);
        }
        for (i = 0; i < frame->nb_samples; i++)
            for (ch = 0; ch < dec_ctx->ch_layout.nb_channels; ch++)
                // fwrite(frame->data[ch] + data_size*i, 1, data_size, outfile);
                g_data.insert(g_data.end(),
                              frame->data[ch] + data_size * i,
                              frame->data[ch] + data_size * (i + 1));
    }
}

void jumpID3(FILE* f)
{
    uint8_t header[10];
    fread(header, 1, 10, f);

    if (memcmp(header, "ID3", 3) == 0)
    {
        int tagSize = (header[6] << 21 | (header[7] << 14) |
                       header[8] << 7) | header[9];
        fseek(f, tagSize, SEEK_CUR);
    }
}

int main2(int argc, char **argv)
{
    const char *outfilename, *filename;
    const AVCodec *codec;
    AVCodecContext *c= NULL;
    AVCodecParserContext *parser = NULL;
    int len, ret;
    FILE *f;
    // *outfile;
    uint8_t inbuf[AUDIO_INBUF_SIZE + AV_INPUT_BUFFER_PADDING_SIZE];
    uint8_t *data;
    size_t   data_size;
    AVPacket *pkt;
    AVFrame *decoded_frame = NULL;
    enum AVSampleFormat sfmt;
    int n_channels = 0;
    const char *fmt;
 
    // if (argc <= 2) {
    //     fprintf(stderr, "Usage: %s <input file> <output file>\n", argv[0]);
    //     exit(0);
    // }
    filename    = "D:/music/test.mp3";
    // outfilename = "D:/music/test.pcm";
 
    pkt = av_packet_alloc();

    /* find the MPEG audio decoder */
    codec = avcodec_find_decoder(AV_CODEC_ID_MP3);
    if (!codec) {
        fprintf(stderr, "Codec not found\n");
        exit(1);
    }
 
    parser = av_parser_init(codec->id);
    if (!parser) {
        fprintf(stderr, "Parser not found\n");
        exit(1);
    }
 
    c = avcodec_alloc_context3(codec);
    if (!c) {
        fprintf(stderr, "Could not allocate audio codec context\n");
        exit(1);
    }
 
    /* open it */
    if (avcodec_open2(c, codec, NULL) < 0) {
        fprintf(stderr, "Could not open codec\n");
        exit(1);
    }
 
    auto err = fopen_s(&f, filename, "rb");
    if (err)
    if (!f) {
        fprintf(stderr, "Could not open %s\n", filename);
        exit(1);
    }
    jumpID3(f);

    // err = fopen_s(&outfile, outfilename, "wb");
    // if (err)
    // if (!outfile) {
    //     av_free(c);
    //     exit(1);
    // }
 
    /* decode until eof */
    data      = inbuf;
    data_size = fread(inbuf, 1, AUDIO_INBUF_SIZE, f);
 
    // fprintf(stderr, "Sample format: %s\n", av_get_sample_fmt_name(c->sample_fmt));

    while (data_size > 0) {
        if (!decoded_frame) {
            if (!(decoded_frame = av_frame_alloc())) {
                fprintf(stderr, "Could not allocate audio frame\n");
                exit(1);
            }
        }
 
        ret = av_parser_parse2(parser, c, &pkt->data, &pkt->size,
                               data, data_size,
                               AV_NOPTS_VALUE, AV_NOPTS_VALUE, 0);
        if (ret < 0) {
            fprintf(stderr, "Error while parsing\n");
            exit(1);
        }
        data      += ret;
        data_size -= ret;
 
        if (pkt->size)
            // decode(c, pkt, decoded_frame, outfile);
            decode(c, pkt, decoded_frame);
 
        if (data_size < AUDIO_REFILL_THRESH) {
            memmove(inbuf, data, data_size);
            data = inbuf;
            len = fread(data + data_size, 1,
                        AUDIO_INBUF_SIZE - data_size, f);
            if (len > 0)
                data_size += len;
        }

    }
 
    /* flush the decoder */
    pkt->data = NULL;
    pkt->size = 0;
    // decode(c, pkt, decoded_frame, outfile);
    decode(c, pkt, decoded_frame);
 
    /* print output pcm infomations, because there have no metadata of pcm */
    sfmt = c->sample_fmt;
 
    if (av_sample_fmt_is_planar(sfmt)) {
        const char *packed = av_get_sample_fmt_name(sfmt);
        printf("Warning: the sample format the decoder produced is planar "
               "(%s). This example will output the first channel only.\n",
               packed ? packed : "?");
        sfmt = av_get_packed_sample_fmt(sfmt);
    }
 
    n_channels = c->ch_layout.nb_channels;
    if ((ret = get_format_from_sample_fmt(&fmt, sfmt)) < 0)
        goto end;
 
    // printf("Play the output audio file with the command:\n"
    //        "ffplay -f %s -ac %d -ar %d %s\n",
    //        fmt, n_channels, c->sample_rate,
    //        outfilename);



    //
    // XAudio2
    //
    exitIfFailed(CoInitializeEx(nullptr, COINIT_MULTITHREADED));

    ComPtr<IXAudio2> xaudio2;
    exitIfFailed(XAudio2Create(xaudio2.GetAddressOf()));
    IXAudio2MasteringVoice* master;
    exitIfFailed(xaudio2->CreateMasteringVoice(&master));

    WAVEFORMATEX wfx = {};
    XAUDIO2_BUFFER buf = {};
    wfx.wFormatTag = WAVE_FORMAT_IEEE_FLOAT;
    wfx.nChannels = 2;
    wfx.nSamplesPerSec = 44100;
    wfx.wBitsPerSample = 32;
    wfx.nBlockAlign = (wfx.nChannels * wfx.wBitsPerSample) / 8;
    wfx.nAvgBytesPerSec = wfx.nSamplesPerSec * wfx.nBlockAlign;
    
    buf.AudioBytes = g_data.size();
    buf.pAudioData = g_data.data();
    buf.Flags = XAUDIO2_END_OF_STREAM;

    IXAudio2SourceVoice* voice;
    exitIfFailed(xaudio2->CreateSourceVoice(&voice, (WAVEFORMATEX*)&wfx));
    exitIfFailed(voice->SubmitSourceBuffer(&buf));

    exitIfFailed(voice->Start());
    Sleep(2000000);
    master->DestroyVoice();

end:
    // fclose(outfile);
    fclose(f);
 
    avcodec_free_context(&c);
    av_parser_close(parser);
    av_frame_free(&decoded_frame);
    av_packet_free(&pkt);
 
    return 0;
}